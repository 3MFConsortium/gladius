# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: 
    - "main"
    - "develop"
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
  workflow_call:  # Allow this workflow to be called by other workflows

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc

    steps:
    - uses: actions/checkout@v4
      with:
          submodules: true
    - uses: TheMrMilchmann/setup-msvc-dev@v3
      if: matrix.os == 'windows-latest'
      with:
        arch: x64
    - name: Install dependencies of glfw on linux
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install -y libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev build-essential libglfw3-dev ninja-build
    - name: Install Ninja with Chocolatey on Windows
      if: runner.os == 'Windows'
      run: choco install ninja -y

    - name: Install BuildCache on Windows
      if: runner.os == 'Windows'
      run: |
        $url = "https://gitlab.com/bits-n-bites/buildcache/-/releases/v0.31.4/downloads/buildcache-windows.zip"
        Invoke-WebRequest -Uri $url -OutFile buildcache.zip
        Expand-Archive buildcache.zip -DestinationPath buildcache
        $buildcachePath = "${{ github.workspace }}\buildcache\bin"
        echo "$buildcachePath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "BUILDCACHE_DIR=C:\buildcache" >> $env:GITHUB_ENV
        echo "CMAKE_C_COMPILER_LAUNCHER=buildcache" >> $env:GITHUB_ENV
        echo "CMAKE_CXX_COMPILER_LAUNCHER=buildcache" >> $env:GITHUB_ENV
      shell: powershell

    - name: Install BuildCache on Linux
      if: runner.os == 'Linux'
      run: |
        curl -L https://gitlab.com/bits-n-bites/buildcache/-/releases/v0.31.4/downloads/buildcache-linux-amd64.tar.gz | tar xz
        sudo mv buildcache/bin/buildcache /usr/local/bin/
        echo "BUILDCACHE_DIR=$HOME/.cache/buildcache" >> $GITHUB_ENV
        echo "CMAKE_C_COMPILER_LAUNCHER=buildcache" >> $GITHUB_ENV
        echo "CMAKE_CXX_COMPILER_LAUNCHER=buildcache" >> $GITHUB_ENV

    - name: Cache BuildCache
      uses: actions/cache@v4
      with:
        path: |
          ${{ runner.os == 'Windows' && 'C:\buildcache' || '~/.cache/buildcache' }}
        key: buildcache-${{ runner.os }}-${{ matrix.c_compiler }}-${{ hashFiles('gladius/src/**/*.cpp', 'gladius/src/**/*.h') }}
        restore-keys: |
          buildcache-${{ runner.os }}-${{ matrix.c_compiler }}-
          buildcache-${{ runner.os }}-
    - name: Cache vcpkg binary packages
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/vcpkg-cache
        key: vcpkg-binary-${{ runner.os }}-${{ hashFiles('gladius/vcpkg.json', 'gladius/vcpkg-triplets/**') }}
        restore-keys: |
          vcpkg-binary-${{ runner.os }}-

    - name: Set vcpkg binary cache path
      shell: bash
      run: |
        echo "VCPKG_DEFAULT_BINARY_CACHE=${{ github.workspace }}/vcpkg-cache" >> $GITHUB_ENV
    - name: Set VCPKG overlay triplet for Windows
      if: runner.os == 'Windows'
      shell: bash
      run: 
        echo "VCPKG_OVERLAY_TRIPLETS=${{ github.workspace }}/gladius/vcpkg-triplets" >> $GITHUB_ENV
        echo "VCPKG_TARGET_TRIPLET=x64-windows-gladius" >> $GITHUB_ENV
        echo "CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV
    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: 'f2bf7d935af722c0cd8219c1f6e30d5ae3d666f2'
        vcpkgJsonGlob: '${{ github.workspace }}/gladius/vcpkg.json'
      env:
        VCPKG_DEFAULT_BINARY_CACHE: '${{ github.workspace }}/vcpkg-cache'
        VCPKG_OVERLAY_PORTS: '${{ github.workspace }}/gladius/vcpkg-overlay-ports'

    - name: Verify vcpkg configuration
      shell: bash
      run: |
        echo "=== vcpkg Configuration ==="
        echo "VCPKG_OVERLAY_TRIPLETS: $VCPKG_OVERLAY_TRIPLETS"
        echo "VCPKG_OVERLAY_PORTS: $VCPKG_OVERLAY_PORTS"
        echo "VCPKG_TARGET_TRIPLET: $VCPKG_TARGET_TRIPLET"
        echo "VCPKG_DEFAULT_BINARY_CACHE: $VCPKG_DEFAULT_BINARY_CACHE"
        echo "VCPKG_BINARY_SOURCES: $VCPKG_BINARY_SOURCES"
        echo "vcpkg version: $(vcpkg version | head -1)"
        echo "vcpkg root: $(vcpkg env --help 2>&1 | grep -o 'default: [^)]*' | head -1 || echo 'Unknown')"

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Cache CMake build
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/build
        key: cmake-${{ runner.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}-${{ hashFiles('gladius/CMakeLists.txt', 'gladius/src/**/CMakeLists.txt', 'gladius/vcpkg.json', 'gladius/cmake/**') }}
        restore-keys: |
          cmake-${{ runner.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}-
          cmake-${{ runner.os }}-${{ matrix.c_compiler }}-

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -G Ninja
        -S ${{ github.workspace }}/gladius
      env:
        VCPKG_OVERLAY_PORTS: '${{ github.workspace }}/gladius/vcpkg-overlay-ports'

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
    - name: Show BuildCache statistics
      run: buildcache -s || echo "BuildCache not available or failed to show statistics"
    - name: Run Tests on Linux
      if: runner.os == 'Linux'
      run: |
        cd ${{ steps.strings.outputs.build-output-dir }}
        ctest --output-on-failure -C ${{ matrix.build_type }} --tests-regex "gladius_test"
    - name: Package_Windows
      if: runner.os == 'Windows'
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --target Generate_Installer --config ${{ matrix.build_type }}
    - name: Upload_Windows_Installer
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: gladius_win64
        path: ${{ steps.strings.outputs.build-output-dir }}/*.msi
    - name: Package_Linux
      if: runner.os == 'Linux'
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --target Generate_Installer --config ${{ matrix.build_type }}
    - name: Upload_Linux_Package
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
        name: gladius_deb
        path: ${{ steps.strings.outputs.build-output-dir }}/*.deb

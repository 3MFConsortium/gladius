/*++

Copyright (C) 2023 Jan Orend

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.6.0.

Abstract: This is an autogenerated plain C Header file in order to allow an easy
 use of GladiusLib

Interface version: 1.2.0

*/

#include "gladius_types.h"
#include "gladius_dynamic.h"
#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32

GladiusLibResult InitGladiusLibWrapperTable(sGladiusLibDynamicWrapperTable * pWrapperTable)
{
    if (pWrapperTable == NULL)
        return GLADIUSLIB_ERROR_INVALIDPARAM;
    
    pWrapperTable->m_LibraryHandle = NULL;
    pWrapperTable->m_BoundingBox_GetMin = NULL;
    pWrapperTable->m_BoundingBox_GetMax = NULL;
    pWrapperTable->m_Face_GetVertexA = NULL;
    pWrapperTable->m_Face_GetVertexB = NULL;
    pWrapperTable->m_Face_GetVertexC = NULL;
    pWrapperTable->m_Face_GetNormal = NULL;
    pWrapperTable->m_Face_GetNormalA = NULL;
    pWrapperTable->m_Face_GetNormalB = NULL;
    pWrapperTable->m_Face_GetNormalC = NULL;
    pWrapperTable->m_DetailedErrorAccessor_GetSize = NULL;
    pWrapperTable->m_DetailedErrorAccessor_Next = NULL;
    pWrapperTable->m_DetailedErrorAccessor_Prev = NULL;
    pWrapperTable->m_DetailedErrorAccessor_Begin = NULL;
    pWrapperTable->m_DetailedErrorAccessor_GetTitle = NULL;
    pWrapperTable->m_DetailedErrorAccessor_GetDescription = NULL;
    pWrapperTable->m_DetailedErrorAccessor_GetSeverity = NULL;
    pWrapperTable->m_ResourceAccessor_GetSize = NULL;
    pWrapperTable->m_ResourceAccessor_Next = NULL;
    pWrapperTable->m_ResourceAccessor_Prev = NULL;
    pWrapperTable->m_ResourceAccessor_Begin = NULL;
    pWrapperTable->m_PolygonAccessor_GetCurrentVertex = NULL;
    pWrapperTable->m_PolygonAccessor_GetArea = NULL;
    pWrapperTable->m_ContourAccessor_GetCurrentPolygon = NULL;
    pWrapperTable->m_FaceAccessor_GetCurrentFace = NULL;
    pWrapperTable->m_ChannelAccessor_Evaluate = NULL;
    pWrapperTable->m_ChannelAccessor_GetMetaInfo = NULL;
    pWrapperTable->m_ChannelAccessor_Copy = NULL;
    pWrapperTable->m_ChannelAccessor_GetName = NULL;
    pWrapperTable->m_ChannelAccessor_SwitchToChannel = NULL;
    pWrapperTable->m_Gladius_LoadAssembly = NULL;
    pWrapperTable->m_Gladius_ExportSTL = NULL;
    pWrapperTable->m_Gladius_GetFloatParameter = NULL;
    pWrapperTable->m_Gladius_SetFloatParameter = NULL;
    pWrapperTable->m_Gladius_GetStringParameter = NULL;
    pWrapperTable->m_Gladius_SetStringParameter = NULL;
    pWrapperTable->m_Gladius_GetVector3fParameter = NULL;
    pWrapperTable->m_Gladius_SetVector3fParameter = NULL;
    pWrapperTable->m_Gladius_GenerateContour = NULL;
    pWrapperTable->m_Gladius_ComputeBoundingBox = NULL;
    pWrapperTable->m_Gladius_GeneratePreviewMesh = NULL;
    pWrapperTable->m_Gladius_GetChannels = NULL;
    pWrapperTable->m_Gladius_GetDetailedErrorAccessor = NULL;
    pWrapperTable->m_Gladius_ClearDetailedErrors = NULL;
    pWrapperTable->m_Gladius_InjectSmoothingKernel = NULL;
    pWrapperTable->m_GetVersion = NULL;
    pWrapperTable->m_GetLastError = NULL;
    pWrapperTable->m_AcquireInstance = NULL;
    pWrapperTable->m_ReleaseInstance = NULL;
    pWrapperTable->m_CreateGladius = NULL;
    
    return GLADIUSLIB_SUCCESS;
}

GladiusLibResult ReleaseGladiusLibWrapperTable(sGladiusLibDynamicWrapperTable * pWrapperTable)
{
    if (pWrapperTable == NULL)
        return GLADIUSLIB_ERROR_INVALIDPARAM;
    
    if (pWrapperTable->m_LibraryHandle != NULL) {
    #ifdef _WIN32
        HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
        FreeLibrary(hModule);
    #else // _WIN32
        dlclose(pWrapperTable->m_LibraryHandle);
    #endif // _WIN32
        return InitGladiusLibWrapperTable(pWrapperTable);
    }
    
    return GLADIUSLIB_SUCCESS;
}

GladiusLibResult LoadGladiusLibWrapperTable(sGladiusLibDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
{
    if (pWrapperTable == NULL)
        return GLADIUSLIB_ERROR_INVALIDPARAM;
    if (pLibraryFileName == NULL)
        return GLADIUSLIB_ERROR_INVALIDPARAM;
    
    #ifdef _WIN32
    // Convert filename to UTF16-string
    int nLength = (int)strlen(pLibraryFileName);
    int nBufferSize = nLength * 2 + 2;
    wchar_t* wsLibraryFileName = malloc(nBufferSize*sizeof(wchar_t));
    memset(wsLibraryFileName, 0, nBufferSize*sizeof(wchar_t));
    int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, wsLibraryFileName, nBufferSize);
    if (nResult == 0) {
        free(wsLibraryFileName);
        return GLADIUSLIB_ERROR_COULDNOTLOADLIBRARY;
    }
    
    HMODULE hLibrary = LoadLibraryW(wsLibraryFileName);
    free(wsLibraryFileName);
    if (hLibrary == 0) 
        return GLADIUSLIB_ERROR_COULDNOTLOADLIBRARY;
    #else // _WIN32
    void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
    if (hLibrary == 0) 
        return GLADIUSLIB_ERROR_COULDNOTLOADLIBRARY;
    dlerror();
    #endif // _WIN32
    
    #ifdef _WIN32
    pWrapperTable->m_BoundingBox_GetMin = (PGladiusLibBoundingBox_GetMinPtr) GetProcAddress(hLibrary, "gladiuslib_boundingbox_getmin");
    #else // _WIN32
    pWrapperTable->m_BoundingBox_GetMin = (PGladiusLibBoundingBox_GetMinPtr) dlsym(hLibrary, "gladiuslib_boundingbox_getmin");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_BoundingBox_GetMin == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_BoundingBox_GetMax = (PGladiusLibBoundingBox_GetMaxPtr) GetProcAddress(hLibrary, "gladiuslib_boundingbox_getmax");
    #else // _WIN32
    pWrapperTable->m_BoundingBox_GetMax = (PGladiusLibBoundingBox_GetMaxPtr) dlsym(hLibrary, "gladiuslib_boundingbox_getmax");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_BoundingBox_GetMax == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_Face_GetVertexA = (PGladiusLibFace_GetVertexAPtr) GetProcAddress(hLibrary, "gladiuslib_face_getvertexa");
    #else // _WIN32
    pWrapperTable->m_Face_GetVertexA = (PGladiusLibFace_GetVertexAPtr) dlsym(hLibrary, "gladiuslib_face_getvertexa");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_Face_GetVertexA == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_Face_GetVertexB = (PGladiusLibFace_GetVertexBPtr) GetProcAddress(hLibrary, "gladiuslib_face_getvertexb");
    #else // _WIN32
    pWrapperTable->m_Face_GetVertexB = (PGladiusLibFace_GetVertexBPtr) dlsym(hLibrary, "gladiuslib_face_getvertexb");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_Face_GetVertexB == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_Face_GetVertexC = (PGladiusLibFace_GetVertexCPtr) GetProcAddress(hLibrary, "gladiuslib_face_getvertexc");
    #else // _WIN32
    pWrapperTable->m_Face_GetVertexC = (PGladiusLibFace_GetVertexCPtr) dlsym(hLibrary, "gladiuslib_face_getvertexc");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_Face_GetVertexC == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_Face_GetNormal = (PGladiusLibFace_GetNormalPtr) GetProcAddress(hLibrary, "gladiuslib_face_getnormal");
    #else // _WIN32
    pWrapperTable->m_Face_GetNormal = (PGladiusLibFace_GetNormalPtr) dlsym(hLibrary, "gladiuslib_face_getnormal");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_Face_GetNormal == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_Face_GetNormalA = (PGladiusLibFace_GetNormalAPtr) GetProcAddress(hLibrary, "gladiuslib_face_getnormala");
    #else // _WIN32
    pWrapperTable->m_Face_GetNormalA = (PGladiusLibFace_GetNormalAPtr) dlsym(hLibrary, "gladiuslib_face_getnormala");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_Face_GetNormalA == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_Face_GetNormalB = (PGladiusLibFace_GetNormalBPtr) GetProcAddress(hLibrary, "gladiuslib_face_getnormalb");
    #else // _WIN32
    pWrapperTable->m_Face_GetNormalB = (PGladiusLibFace_GetNormalBPtr) dlsym(hLibrary, "gladiuslib_face_getnormalb");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_Face_GetNormalB == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_Face_GetNormalC = (PGladiusLibFace_GetNormalCPtr) GetProcAddress(hLibrary, "gladiuslib_face_getnormalc");
    #else // _WIN32
    pWrapperTable->m_Face_GetNormalC = (PGladiusLibFace_GetNormalCPtr) dlsym(hLibrary, "gladiuslib_face_getnormalc");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_Face_GetNormalC == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_DetailedErrorAccessor_GetSize = (PGladiusLibDetailedErrorAccessor_GetSizePtr) GetProcAddress(hLibrary, "gladiuslib_detailederroraccessor_getsize");
    #else // _WIN32
    pWrapperTable->m_DetailedErrorAccessor_GetSize = (PGladiusLibDetailedErrorAccessor_GetSizePtr) dlsym(hLibrary, "gladiuslib_detailederroraccessor_getsize");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_DetailedErrorAccessor_GetSize == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_DetailedErrorAccessor_Next = (PGladiusLibDetailedErrorAccessor_NextPtr) GetProcAddress(hLibrary, "gladiuslib_detailederroraccessor_next");
    #else // _WIN32
    pWrapperTable->m_DetailedErrorAccessor_Next = (PGladiusLibDetailedErrorAccessor_NextPtr) dlsym(hLibrary, "gladiuslib_detailederroraccessor_next");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_DetailedErrorAccessor_Next == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_DetailedErrorAccessor_Prev = (PGladiusLibDetailedErrorAccessor_PrevPtr) GetProcAddress(hLibrary, "gladiuslib_detailederroraccessor_prev");
    #else // _WIN32
    pWrapperTable->m_DetailedErrorAccessor_Prev = (PGladiusLibDetailedErrorAccessor_PrevPtr) dlsym(hLibrary, "gladiuslib_detailederroraccessor_prev");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_DetailedErrorAccessor_Prev == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_DetailedErrorAccessor_Begin = (PGladiusLibDetailedErrorAccessor_BeginPtr) GetProcAddress(hLibrary, "gladiuslib_detailederroraccessor_begin");
    #else // _WIN32
    pWrapperTable->m_DetailedErrorAccessor_Begin = (PGladiusLibDetailedErrorAccessor_BeginPtr) dlsym(hLibrary, "gladiuslib_detailederroraccessor_begin");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_DetailedErrorAccessor_Begin == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_DetailedErrorAccessor_GetTitle = (PGladiusLibDetailedErrorAccessor_GetTitlePtr) GetProcAddress(hLibrary, "gladiuslib_detailederroraccessor_gettitle");
    #else // _WIN32
    pWrapperTable->m_DetailedErrorAccessor_GetTitle = (PGladiusLibDetailedErrorAccessor_GetTitlePtr) dlsym(hLibrary, "gladiuslib_detailederroraccessor_gettitle");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_DetailedErrorAccessor_GetTitle == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_DetailedErrorAccessor_GetDescription = (PGladiusLibDetailedErrorAccessor_GetDescriptionPtr) GetProcAddress(hLibrary, "gladiuslib_detailederroraccessor_getdescription");
    #else // _WIN32
    pWrapperTable->m_DetailedErrorAccessor_GetDescription = (PGladiusLibDetailedErrorAccessor_GetDescriptionPtr) dlsym(hLibrary, "gladiuslib_detailederroraccessor_getdescription");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_DetailedErrorAccessor_GetDescription == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_DetailedErrorAccessor_GetSeverity = (PGladiusLibDetailedErrorAccessor_GetSeverityPtr) GetProcAddress(hLibrary, "gladiuslib_detailederroraccessor_getseverity");
    #else // _WIN32
    pWrapperTable->m_DetailedErrorAccessor_GetSeverity = (PGladiusLibDetailedErrorAccessor_GetSeverityPtr) dlsym(hLibrary, "gladiuslib_detailederroraccessor_getseverity");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_DetailedErrorAccessor_GetSeverity == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_ResourceAccessor_GetSize = (PGladiusLibResourceAccessor_GetSizePtr) GetProcAddress(hLibrary, "gladiuslib_resourceaccessor_getsize");
    #else // _WIN32
    pWrapperTable->m_ResourceAccessor_GetSize = (PGladiusLibResourceAccessor_GetSizePtr) dlsym(hLibrary, "gladiuslib_resourceaccessor_getsize");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_ResourceAccessor_GetSize == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_ResourceAccessor_Next = (PGladiusLibResourceAccessor_NextPtr) GetProcAddress(hLibrary, "gladiuslib_resourceaccessor_next");
    #else // _WIN32
    pWrapperTable->m_ResourceAccessor_Next = (PGladiusLibResourceAccessor_NextPtr) dlsym(hLibrary, "gladiuslib_resourceaccessor_next");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_ResourceAccessor_Next == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_ResourceAccessor_Prev = (PGladiusLibResourceAccessor_PrevPtr) GetProcAddress(hLibrary, "gladiuslib_resourceaccessor_prev");
    #else // _WIN32
    pWrapperTable->m_ResourceAccessor_Prev = (PGladiusLibResourceAccessor_PrevPtr) dlsym(hLibrary, "gladiuslib_resourceaccessor_prev");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_ResourceAccessor_Prev == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_ResourceAccessor_Begin = (PGladiusLibResourceAccessor_BeginPtr) GetProcAddress(hLibrary, "gladiuslib_resourceaccessor_begin");
    #else // _WIN32
    pWrapperTable->m_ResourceAccessor_Begin = (PGladiusLibResourceAccessor_BeginPtr) dlsym(hLibrary, "gladiuslib_resourceaccessor_begin");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_ResourceAccessor_Begin == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_PolygonAccessor_GetCurrentVertex = (PGladiusLibPolygonAccessor_GetCurrentVertexPtr) GetProcAddress(hLibrary, "gladiuslib_polygonaccessor_getcurrentvertex");
    #else // _WIN32
    pWrapperTable->m_PolygonAccessor_GetCurrentVertex = (PGladiusLibPolygonAccessor_GetCurrentVertexPtr) dlsym(hLibrary, "gladiuslib_polygonaccessor_getcurrentvertex");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_PolygonAccessor_GetCurrentVertex == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_PolygonAccessor_GetArea = (PGladiusLibPolygonAccessor_GetAreaPtr) GetProcAddress(hLibrary, "gladiuslib_polygonaccessor_getarea");
    #else // _WIN32
    pWrapperTable->m_PolygonAccessor_GetArea = (PGladiusLibPolygonAccessor_GetAreaPtr) dlsym(hLibrary, "gladiuslib_polygonaccessor_getarea");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_PolygonAccessor_GetArea == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_ContourAccessor_GetCurrentPolygon = (PGladiusLibContourAccessor_GetCurrentPolygonPtr) GetProcAddress(hLibrary, "gladiuslib_contouraccessor_getcurrentpolygon");
    #else // _WIN32
    pWrapperTable->m_ContourAccessor_GetCurrentPolygon = (PGladiusLibContourAccessor_GetCurrentPolygonPtr) dlsym(hLibrary, "gladiuslib_contouraccessor_getcurrentpolygon");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_ContourAccessor_GetCurrentPolygon == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_FaceAccessor_GetCurrentFace = (PGladiusLibFaceAccessor_GetCurrentFacePtr) GetProcAddress(hLibrary, "gladiuslib_faceaccessor_getcurrentface");
    #else // _WIN32
    pWrapperTable->m_FaceAccessor_GetCurrentFace = (PGladiusLibFaceAccessor_GetCurrentFacePtr) dlsym(hLibrary, "gladiuslib_faceaccessor_getcurrentface");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_FaceAccessor_GetCurrentFace == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_ChannelAccessor_Evaluate = (PGladiusLibChannelAccessor_EvaluatePtr) GetProcAddress(hLibrary, "gladiuslib_channelaccessor_evaluate");
    #else // _WIN32
    pWrapperTable->m_ChannelAccessor_Evaluate = (PGladiusLibChannelAccessor_EvaluatePtr) dlsym(hLibrary, "gladiuslib_channelaccessor_evaluate");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_ChannelAccessor_Evaluate == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_ChannelAccessor_GetMetaInfo = (PGladiusLibChannelAccessor_GetMetaInfoPtr) GetProcAddress(hLibrary, "gladiuslib_channelaccessor_getmetainfo");
    #else // _WIN32
    pWrapperTable->m_ChannelAccessor_GetMetaInfo = (PGladiusLibChannelAccessor_GetMetaInfoPtr) dlsym(hLibrary, "gladiuslib_channelaccessor_getmetainfo");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_ChannelAccessor_GetMetaInfo == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_ChannelAccessor_Copy = (PGladiusLibChannelAccessor_CopyPtr) GetProcAddress(hLibrary, "gladiuslib_channelaccessor_copy");
    #else // _WIN32
    pWrapperTable->m_ChannelAccessor_Copy = (PGladiusLibChannelAccessor_CopyPtr) dlsym(hLibrary, "gladiuslib_channelaccessor_copy");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_ChannelAccessor_Copy == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_ChannelAccessor_GetName = (PGladiusLibChannelAccessor_GetNamePtr) GetProcAddress(hLibrary, "gladiuslib_channelaccessor_getname");
    #else // _WIN32
    pWrapperTable->m_ChannelAccessor_GetName = (PGladiusLibChannelAccessor_GetNamePtr) dlsym(hLibrary, "gladiuslib_channelaccessor_getname");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_ChannelAccessor_GetName == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_ChannelAccessor_SwitchToChannel = (PGladiusLibChannelAccessor_SwitchToChannelPtr) GetProcAddress(hLibrary, "gladiuslib_channelaccessor_switchtochannel");
    #else // _WIN32
    pWrapperTable->m_ChannelAccessor_SwitchToChannel = (PGladiusLibChannelAccessor_SwitchToChannelPtr) dlsym(hLibrary, "gladiuslib_channelaccessor_switchtochannel");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_ChannelAccessor_SwitchToChannel == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_Gladius_LoadAssembly = (PGladiusLibGladius_LoadAssemblyPtr) GetProcAddress(hLibrary, "gladiuslib_gladius_loadassembly");
    #else // _WIN32
    pWrapperTable->m_Gladius_LoadAssembly = (PGladiusLibGladius_LoadAssemblyPtr) dlsym(hLibrary, "gladiuslib_gladius_loadassembly");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_Gladius_LoadAssembly == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_Gladius_ExportSTL = (PGladiusLibGladius_ExportSTLPtr) GetProcAddress(hLibrary, "gladiuslib_gladius_exportstl");
    #else // _WIN32
    pWrapperTable->m_Gladius_ExportSTL = (PGladiusLibGladius_ExportSTLPtr) dlsym(hLibrary, "gladiuslib_gladius_exportstl");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_Gladius_ExportSTL == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_Gladius_GetFloatParameter = (PGladiusLibGladius_GetFloatParameterPtr) GetProcAddress(hLibrary, "gladiuslib_gladius_getfloatparameter");
    #else // _WIN32
    pWrapperTable->m_Gladius_GetFloatParameter = (PGladiusLibGladius_GetFloatParameterPtr) dlsym(hLibrary, "gladiuslib_gladius_getfloatparameter");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_Gladius_GetFloatParameter == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_Gladius_SetFloatParameter = (PGladiusLibGladius_SetFloatParameterPtr) GetProcAddress(hLibrary, "gladiuslib_gladius_setfloatparameter");
    #else // _WIN32
    pWrapperTable->m_Gladius_SetFloatParameter = (PGladiusLibGladius_SetFloatParameterPtr) dlsym(hLibrary, "gladiuslib_gladius_setfloatparameter");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_Gladius_SetFloatParameter == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_Gladius_GetStringParameter = (PGladiusLibGladius_GetStringParameterPtr) GetProcAddress(hLibrary, "gladiuslib_gladius_getstringparameter");
    #else // _WIN32
    pWrapperTable->m_Gladius_GetStringParameter = (PGladiusLibGladius_GetStringParameterPtr) dlsym(hLibrary, "gladiuslib_gladius_getstringparameter");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_Gladius_GetStringParameter == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_Gladius_SetStringParameter = (PGladiusLibGladius_SetStringParameterPtr) GetProcAddress(hLibrary, "gladiuslib_gladius_setstringparameter");
    #else // _WIN32
    pWrapperTable->m_Gladius_SetStringParameter = (PGladiusLibGladius_SetStringParameterPtr) dlsym(hLibrary, "gladiuslib_gladius_setstringparameter");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_Gladius_SetStringParameter == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_Gladius_GetVector3fParameter = (PGladiusLibGladius_GetVector3fParameterPtr) GetProcAddress(hLibrary, "gladiuslib_gladius_getvector3fparameter");
    #else // _WIN32
    pWrapperTable->m_Gladius_GetVector3fParameter = (PGladiusLibGladius_GetVector3fParameterPtr) dlsym(hLibrary, "gladiuslib_gladius_getvector3fparameter");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_Gladius_GetVector3fParameter == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_Gladius_SetVector3fParameter = (PGladiusLibGladius_SetVector3fParameterPtr) GetProcAddress(hLibrary, "gladiuslib_gladius_setvector3fparameter");
    #else // _WIN32
    pWrapperTable->m_Gladius_SetVector3fParameter = (PGladiusLibGladius_SetVector3fParameterPtr) dlsym(hLibrary, "gladiuslib_gladius_setvector3fparameter");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_Gladius_SetVector3fParameter == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_Gladius_GenerateContour = (PGladiusLibGladius_GenerateContourPtr) GetProcAddress(hLibrary, "gladiuslib_gladius_generatecontour");
    #else // _WIN32
    pWrapperTable->m_Gladius_GenerateContour = (PGladiusLibGladius_GenerateContourPtr) dlsym(hLibrary, "gladiuslib_gladius_generatecontour");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_Gladius_GenerateContour == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_Gladius_ComputeBoundingBox = (PGladiusLibGladius_ComputeBoundingBoxPtr) GetProcAddress(hLibrary, "gladiuslib_gladius_computeboundingbox");
    #else // _WIN32
    pWrapperTable->m_Gladius_ComputeBoundingBox = (PGladiusLibGladius_ComputeBoundingBoxPtr) dlsym(hLibrary, "gladiuslib_gladius_computeboundingbox");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_Gladius_ComputeBoundingBox == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_Gladius_GeneratePreviewMesh = (PGladiusLibGladius_GeneratePreviewMeshPtr) GetProcAddress(hLibrary, "gladiuslib_gladius_generatepreviewmesh");
    #else // _WIN32
    pWrapperTable->m_Gladius_GeneratePreviewMesh = (PGladiusLibGladius_GeneratePreviewMeshPtr) dlsym(hLibrary, "gladiuslib_gladius_generatepreviewmesh");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_Gladius_GeneratePreviewMesh == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_Gladius_GetChannels = (PGladiusLibGladius_GetChannelsPtr) GetProcAddress(hLibrary, "gladiuslib_gladius_getchannels");
    #else // _WIN32
    pWrapperTable->m_Gladius_GetChannels = (PGladiusLibGladius_GetChannelsPtr) dlsym(hLibrary, "gladiuslib_gladius_getchannels");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_Gladius_GetChannels == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_Gladius_GetDetailedErrorAccessor = (PGladiusLibGladius_GetDetailedErrorAccessorPtr) GetProcAddress(hLibrary, "gladiuslib_gladius_getdetailederroraccessor");
    #else // _WIN32
    pWrapperTable->m_Gladius_GetDetailedErrorAccessor = (PGladiusLibGladius_GetDetailedErrorAccessorPtr) dlsym(hLibrary, "gladiuslib_gladius_getdetailederroraccessor");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_Gladius_GetDetailedErrorAccessor == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_Gladius_ClearDetailedErrors = (PGladiusLibGladius_ClearDetailedErrorsPtr) GetProcAddress(hLibrary, "gladiuslib_gladius_cleardetailederrors");
    #else // _WIN32
    pWrapperTable->m_Gladius_ClearDetailedErrors = (PGladiusLibGladius_ClearDetailedErrorsPtr) dlsym(hLibrary, "gladiuslib_gladius_cleardetailederrors");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_Gladius_ClearDetailedErrors == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_Gladius_InjectSmoothingKernel = (PGladiusLibGladius_InjectSmoothingKernelPtr) GetProcAddress(hLibrary, "gladiuslib_gladius_injectsmoothingkernel");
    #else // _WIN32
    pWrapperTable->m_Gladius_InjectSmoothingKernel = (PGladiusLibGladius_InjectSmoothingKernelPtr) dlsym(hLibrary, "gladiuslib_gladius_injectsmoothingkernel");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_Gladius_InjectSmoothingKernel == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_GetVersion = (PGladiusLibGetVersionPtr) GetProcAddress(hLibrary, "gladiuslib_getversion");
    #else // _WIN32
    pWrapperTable->m_GetVersion = (PGladiusLibGetVersionPtr) dlsym(hLibrary, "gladiuslib_getversion");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_GetVersion == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_GetLastError = (PGladiusLibGetLastErrorPtr) GetProcAddress(hLibrary, "gladiuslib_getlasterror");
    #else // _WIN32
    pWrapperTable->m_GetLastError = (PGladiusLibGetLastErrorPtr) dlsym(hLibrary, "gladiuslib_getlasterror");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_GetLastError == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_AcquireInstance = (PGladiusLibAcquireInstancePtr) GetProcAddress(hLibrary, "gladiuslib_acquireinstance");
    #else // _WIN32
    pWrapperTable->m_AcquireInstance = (PGladiusLibAcquireInstancePtr) dlsym(hLibrary, "gladiuslib_acquireinstance");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_AcquireInstance == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_ReleaseInstance = (PGladiusLibReleaseInstancePtr) GetProcAddress(hLibrary, "gladiuslib_releaseinstance");
    #else // _WIN32
    pWrapperTable->m_ReleaseInstance = (PGladiusLibReleaseInstancePtr) dlsym(hLibrary, "gladiuslib_releaseinstance");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_ReleaseInstance == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    #ifdef _WIN32
    pWrapperTable->m_CreateGladius = (PGladiusLibCreateGladiusPtr) GetProcAddress(hLibrary, "gladiuslib_creategladius");
    #else // _WIN32
    pWrapperTable->m_CreateGladius = (PGladiusLibCreateGladiusPtr) dlsym(hLibrary, "gladiuslib_creategladius");
    dlerror();
    #endif // _WIN32
    if (pWrapperTable->m_CreateGladius == NULL)
        return GLADIUSLIB_ERROR_COULDNOTFINDLIBRARYEXPORT;
    
    pWrapperTable->m_LibraryHandle = hLibrary;
    return GLADIUSLIB_SUCCESS;
}


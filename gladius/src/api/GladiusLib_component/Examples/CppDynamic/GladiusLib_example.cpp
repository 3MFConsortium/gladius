/*++

Copyright (C) 2021 Jan Orend

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.6.0.

Abstract: This is an autogenerated C++ application that demonstrates the
 usage of the Dynamic C++ bindings of GladiusLib

Interface version: 1.0.0

*/

#include <gladius_dynamic.hpp>

#include <filesystem>
#include <iostream>

int main()
{
    try
    {
        std::filesystem::current_path(std::filesystem::canonical("../../Implementations/Cpp"));
        std::cout << "Current path = " << std::filesystem::current_path() << "\n";
        auto const libpath = std::filesystem::canonical("gladiuslib.dll");
        std::cout << "gladiuslib path = " << libpath << "\n";

        auto wrapper = GladiusLib::CWrapper::loadLibrary(libpath.string());
        GladiusLib_uint32 nMajor, nMinor, nMicro;
        wrapper->GetVersion(nMajor, nMinor, nMicro);
        std::cout << "GladiusLib.Version = " << nMajor << "." << nMinor << "." << nMicro;
        std::cout << std::endl;

        std::cout << std::endl;
        auto gladius = wrapper->CreateGladius();
        gladius->LoadAssembly("D:/gladiusModels/brioMirandaTrack/BrioMirandaTrack_144_mm_M_F.json");

        auto contourAccessor = gladius->GenerateContour(0.5, 0.);
        std::cout << "contourAccessor size: " << contourAccessor->GetSize() << "\n";

        do
        {
            auto polyAccessor = contourAccessor->GetCurrentPolygon();
            std::cout << "\tpolygon size: " << polyAccessor->GetSize() << "\n";
            do
            {
                auto vertex = polyAccessor->GetCurrentVertex();
                std::cout << "\t\t( " << vertex.m_Coordinates[0] << " | " << vertex.m_Coordinates[1]
                          << ")\n";
            } while (polyAccessor->Next());
        } while (contourAccessor->Next());

        auto const partLength = gladius->GetFloatParameter("Assembly", "Part_9", "part_length");
        std::cout << "\npart_length = " << partLength << "\n";

        gladius->SetFloatParameter("Assembly", "Part_9", "part_length", 200);
        auto const newPartLength = gladius->GetFloatParameter("Assembly", "Part_9", "part_length");
        std::cout << "new value of part_length = " << newPartLength << "\n";

        gladius->ExportSTL("D:/tmp/test.stl");
    }
    catch (std::exception & e)
    {
        std::cout << e.what() << std::endl;
        return 1;
    }
    return 0;
}

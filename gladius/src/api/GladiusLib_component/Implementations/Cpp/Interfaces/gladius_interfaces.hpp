/*++

Copyright (C) 2023 Jan Orend

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.6.0.

Abstract: This is an autogenerated C++ header file in order to allow easy
development of GladiusLib. The implementer of GladiusLib needs to
derive concrete classes from the abstract classes in this header.

Interface version: 1.2.0

*/


#ifndef __GLADIUSLIB_CPPINTERFACES
#define __GLADIUSLIB_CPPINTERFACES

#include <string>
#include <memory>

#include "gladius_types.hpp"



namespace GladiusLib {
namespace Impl {

/**
 Forward declarations of class interfaces
*/
class IBase;
class IBoundingBox;
class IFace;
class IDetailedErrorAccessor;
class IResourceAccessor;
class IPolygonAccessor;
class IContourAccessor;
class IFaceAccessor;
class IChannelAccessor;
class IGladius;



/*************************************************************************************************************************
 Class interface for Base 
**************************************************************************************************************************/

class IBase {
public:
    /**
    * IBase::~IBase - virtual destructor of IBase
    */
    virtual ~IBase() {};

    /**
    * IBase::ReleaseBaseClassInterface - Releases ownership of a base class interface. Deletes the reference, if necessary.
    * @param[in] pIBase - The base class instance to release
    */
    static void ReleaseBaseClassInterface(IBase* pIBase)
    {
        if (pIBase) {
            pIBase->DecRefCount();
        }
    };

    /**
    * IBase::AcquireBaseClassInterface - Acquires shared ownership of a base class interface.
    * @param[in] pIBase - The base class instance to acquire
    */
    static void AcquireBaseClassInterface(IBase* pIBase)
    {
        if (pIBase) {
            pIBase->IncRefCount();
        }
    };


    /**
    * IBase::GetLastErrorMessage - Returns the last error registered of this class instance
    * @param[out] sErrorMessage - Message of the last error registered
    * @return Has an error been registered already
    */
    virtual bool GetLastErrorMessage(std::string & sErrorMessage) = 0;

    /**
    * IBase::ClearErrorMessages - Clears all registered messages of this class instance
    */
    virtual void ClearErrorMessages() = 0;

    /**
    * IBase::RegisterErrorMessage - Registers an error message with this class instance
    * @param[in] sErrorMessage - Error message to register
    */
    virtual void RegisterErrorMessage(const std::string & sErrorMessage) = 0;

    /**
    * IBase::IncRefCount - Increases the reference count of a class instance
    */
    virtual void IncRefCount() = 0;

    /**
    * IBase::DecRefCount - Decreases the reference count of a class instance and free releases it, if the last reference has been removed
    * @return Has the object been released
    */
    virtual bool DecRefCount() = 0;
};


/**
 Definition of a shared pointer class for IBase
*/
template<class T>
class IBaseSharedPtr : public std::shared_ptr<T>
{
public:
    explicit IBaseSharedPtr(T* t = nullptr)
        : std::shared_ptr<T>(t, IBase::ReleaseBaseClassInterface)
    {
        t->IncRefCount();
    }

    // Reset function, as it also needs to properly set the deleter.
    void reset(T* t = nullptr)
    {
        std::shared_ptr<T>::reset(t, IBase::ReleaseBaseClassInterface);
    }

    // Get-function that increases the Base class's reference count
    T* getCoOwningPtr()
    {
        T* t = this->get();
        t->IncRefCount();
        return t;
    }
};


typedef IBaseSharedPtr<IBase> PIBase;


/*************************************************************************************************************************
 Class interface for BoundingBox 
**************************************************************************************************************************/

class IBoundingBox : public virtual IBase {
public:
    /**
    * IBoundingBox::GetMin - Returns the minimum coordinates of the bounding box
    * @return The number of elements
    */
    virtual GladiusLib::sVector3f GetMin() = 0;

    /**
    * IBoundingBox::GetMax - Returns the nmaximum coordinates of the bounding box
    * @return The number of elements
    */
    virtual GladiusLib::sVector3f GetMax() = 0;

};

typedef IBaseSharedPtr<IBoundingBox> PIBoundingBox;


/*************************************************************************************************************************
 Class interface for Face 
**************************************************************************************************************************/

class IFace : public virtual IBase {
public:
    /**
    * IFace::GetVertexA - Returns the vertex A of the face
    * @return Vertex of the face
    */
    virtual GladiusLib::sVector3f GetVertexA() = 0;

    /**
    * IFace::GetVertexB - Returns the vertex B of the face
    * @return Vertex of the face
    */
    virtual GladiusLib::sVector3f GetVertexB() = 0;

    /**
    * IFace::GetVertexC - Returns the vertex C of the face
    * @return Vertex of the face
    */
    virtual GladiusLib::sVector3f GetVertexC() = 0;

    /**
    * IFace::GetNormal - Returns the normal of the face
    * @return Normal of the face
    */
    virtual GladiusLib::sVector3f GetNormal() = 0;

    /**
    * IFace::GetNormalA - Returns the normal of vertex A
    * @return Normal of vertex A
    */
    virtual GladiusLib::sVector3f GetNormalA() = 0;

    /**
    * IFace::GetNormalB - Returns the normal of vertex B
    * @return Normal of vertex B
    */
    virtual GladiusLib::sVector3f GetNormalB() = 0;

    /**
    * IFace::GetNormalC - Returns the normal of vertex C
    * @return Normal of vertex C
    */
    virtual GladiusLib::sVector3f GetNormalC() = 0;

};

typedef IBaseSharedPtr<IFace> PIFace;


/*************************************************************************************************************************
 Class interface for DetailedErrorAccessor 
**************************************************************************************************************************/

class IDetailedErrorAccessor : public virtual IBase {
public:
    /**
    * IDetailedErrorAccessor::GetSize - Returns the number of elements
    * @return The number of elements
    */
    virtual GladiusLib_uint64 GetSize() = 0;

    /**
    * IDetailedErrorAccessor::Next - Go to the next element
    * @return Returns true, if there is a next element
    */
    virtual bool Next() = 0;

    /**
    * IDetailedErrorAccessor::Prev - Go to the previous element
    * @return Returns true, if there is a previous element
    */
    virtual bool Prev() = 0;

    /**
    * IDetailedErrorAccessor::Begin - Go to the first element
    */
    virtual void Begin() = 0;

    /**
    * IDetailedErrorAccessor::GetTitle - Returns the title of the error
    * @return Title of the error
    */
    virtual std::string GetTitle() = 0;

    /**
    * IDetailedErrorAccessor::GetDescription - Returns the description of the error
    * @return Description of the error
    */
    virtual std::string GetDescription() = 0;

    /**
    * IDetailedErrorAccessor::GetSeverity - Returns the severity of the error
    * @return Severity of the error
    */
    virtual GladiusLib_uint32 GetSeverity() = 0;

};

typedef IBaseSharedPtr<IDetailedErrorAccessor> PIDetailedErrorAccessor;


/*************************************************************************************************************************
 Class interface for ResourceAccessor 
**************************************************************************************************************************/

class IResourceAccessor : public virtual IBase {
public:
    /**
    * IResourceAccessor::GetSize - Returns the number of elements
    * @return The number of elements
    */
    virtual GladiusLib_uint64 GetSize() = 0;

    /**
    * IResourceAccessor::Next - Go to the next element
    * @return Returns true, if there is a next element
    */
    virtual bool Next() = 0;

    /**
    * IResourceAccessor::Prev - Go to the previous element
    * @return Returns true, if there is a previous element
    */
    virtual bool Prev() = 0;

    /**
    * IResourceAccessor::Begin - Go to the first element
    */
    virtual void Begin() = 0;

};

typedef IBaseSharedPtr<IResourceAccessor> PIResourceAccessor;


/*************************************************************************************************************************
 Class interface for PolygonAccessor 
**************************************************************************************************************************/

class IPolygonAccessor : public virtual IResourceAccessor {
public:
    /**
    * IPolygonAccessor::GetCurrentVertex - Returns the current vertex
    * @return Returns the current vertex
    */
    virtual GladiusLib::sVector2f GetCurrentVertex() = 0;

    /**
    * IPolygonAccessor::GetArea - Returns the enclosed area
    * @return Enclosed area
    */
    virtual GladiusLib_single GetArea() = 0;

};

typedef IBaseSharedPtr<IPolygonAccessor> PIPolygonAccessor;


/*************************************************************************************************************************
 Class interface for ContourAccessor 
**************************************************************************************************************************/

class IContourAccessor : public virtual IResourceAccessor {
public:
    /**
    * IContourAccessor::GetCurrentPolygon - Returns an Accessor for the current Polygon
    * @return Returns the current vertex
    */
    virtual IPolygonAccessor * GetCurrentPolygon() = 0;

};

typedef IBaseSharedPtr<IContourAccessor> PIContourAccessor;


/*************************************************************************************************************************
 Class interface for FaceAccessor 
**************************************************************************************************************************/

class IFaceAccessor : public virtual IResourceAccessor {
public:
    /**
    * IFaceAccessor::GetCurrentFace - Returns an Accessor for the current Face
    * @return Returns the current vertex
    */
    virtual IFace * GetCurrentFace() = 0;

};

typedef IBaseSharedPtr<IFaceAccessor> PIFaceAccessor;


/*************************************************************************************************************************
 Class interface for ChannelAccessor 
**************************************************************************************************************************/

class IChannelAccessor : public virtual IResourceAccessor {
public:
    /**
    * IChannelAccessor::Evaluate - Generates the matrix, necessary to call the methods below
    * @param[in] fZ_mm - Z-height in mm
    * @param[in] fPixelWidth_mm - 
    * @param[in] fPixelHeight_mm - 
    */
    virtual void Evaluate(const GladiusLib_single fZ_mm, const GladiusLib_single fPixelWidth_mm, const GladiusLib_single fPixelHeight_mm) = 0;

    /**
    * IChannelAccessor::GetMetaInfo - Returns meta information to the matrix. Note: Evaluate has to be called before.
    * @return Returns the current meta information to the channel matrix
    */
    virtual GladiusLib::sChannelMetaInfo GetMetaInfo() = 0;

    /**
    * IChannelAccessor::Copy - Copies the matrix to the target address provided by the client. It is the responsibility of the client to ensure, that enough memory is reserverd. The required size can be queried from ChannelMetaInfo. Note: Evaluate has to be called before.
    * @param[in] nTargetPtr - Target address to copy the matrix to.
    */
    virtual void Copy(const GladiusLib_int64 nTargetPtr) = 0;

    /**
    * IChannelAccessor::GetName - Short name of the channel, also used as key for accessing the channel
    * @return Short name of the channel, also used as key for accessing the channel
    */
    virtual std::string GetName() = 0;

    /**
    * IChannelAccessor::SwitchToChannel - Switches to the channel with the given name
    * @param[in] sName - Name of the channel to switch to.
    * @return True, if successful
    */
    virtual bool SwitchToChannel(const std::string & sName) = 0;

};

typedef IBaseSharedPtr<IChannelAccessor> PIChannelAccessor;


/*************************************************************************************************************************
 Class interface for Gladius 
**************************************************************************************************************************/

class IGladius : public virtual IBase {
public:
    /**
    * IGladius::LoadAssembly - Loads an Assembly
    * @param[in] sFilename - The filename of the assembly
    */
    virtual void LoadAssembly(const std::string & sFilename) = 0;

    /**
    * IGladius::ExportSTL - Exports the current assembly to an stl-file
    * @param[in] sFilename - The target filename
    */
    virtual void ExportSTL(const std::string & sFilename) = 0;

    /**
    * IGladius::GetFloatParameter - Returns the value of the given parameter
    * @param[in] sModelName - Name of the model the parameter belongs to
    * @param[in] sNodeName - Name of the node the parameter belongs to
    * @param[in] sParameterName - Name of the parameter
    * @return Value of the parameter
    */
    virtual GladiusLib_single GetFloatParameter(const std::string & sModelName, const std::string & sNodeName, const std::string & sParameterName) = 0;

    /**
    * IGladius::SetFloatParameter - Sets the value of the given parameter
    * @param[in] sModelName - Name of the model the parameter belongs to
    * @param[in] sNodeName - Name of the node the parameter belongs to
    * @param[in] sParameterName - Name of the parameter
    * @param[in] fValue - Value of the parameter
    */
    virtual void SetFloatParameter(const std::string & sModelName, const std::string & sNodeName, const std::string & sParameterName, const GladiusLib_single fValue) = 0;

    /**
    * IGladius::GetStringParameter - Returns the value of the given parameter
    * @param[in] sModelName - Name of the model the parameter belongs to
    * @param[in] sNodeName - Name of the node the parameter belongs to
    * @param[in] sParameterName - Name of the parameter
    * @return Value of the parameter
    */
    virtual std::string GetStringParameter(const std::string & sModelName, const std::string & sNodeName, const std::string & sParameterName) = 0;

    /**
    * IGladius::SetStringParameter - Sets the value of the given parameter
    * @param[in] sModelName - Name of the model the parameter belongs to
    * @param[in] sNodeName - Name of the node the parameter belongs to
    * @param[in] sParameterName - Name of the parameter
    * @param[in] sValue - Value of the parameter
    */
    virtual void SetStringParameter(const std::string & sModelName, const std::string & sNodeName, const std::string & sParameterName, const std::string & sValue) = 0;

    /**
    * IGladius::GetVector3fParameter - Returns the value of the given parameter
    * @param[in] sModelName - Name of the model the parameter belongs to
    * @param[in] sNodeName - Name of the node the parameter belongs to
    * @param[in] sParameterName - Name of the parameter
    * @return Value of the parameter
    */
    virtual GladiusLib::sVector3f GetVector3fParameter(const std::string & sModelName, const std::string & sNodeName, const std::string & sParameterName) = 0;

    /**
    * IGladius::SetVector3fParameter - Sets the value of the given parameter
    * @param[in] sModelName - Name of the model the parameter belongs to
    * @param[in] sNodeName - Name of the node the parameter belongs to
    * @param[in] sParameterName - Name of the parameter
    * @param[in] fX - Value of the parameter
    * @param[in] fY - Value of the parameter
    * @param[in] fZ - Value of the parameter
    */
    virtual void SetVector3fParameter(const std::string & sModelName, const std::string & sNodeName, const std::string & sParameterName, const GladiusLib_single fX, const GladiusLib_single fY, const GladiusLib_single fZ) = 0;

    /**
    * IGladius::GenerateContour - Generates a contour in the xy-plane
    * @param[in] fZ - Z-height in mm
    * @param[in] fOffset - Offset from the part boundary in mm
    * @return Accessor for the generated contour
    */
    virtual IContourAccessor * GenerateContour(const GladiusLib_single fZ, const GladiusLib_single fOffset) = 0;

    /**
    * IGladius::ComputeBoundingBox - Computes and returns the bounding box of the model
    * @return The computed bounding box
    */
    virtual IBoundingBox * ComputeBoundingBox() = 0;

    /**
    * IGladius::GeneratePreviewMesh - Computes a coarse mesh of the model that can be used for preview or collision detection
    * @return Accessor to the faces of the preview mesh
    */
    virtual IFaceAccessor * GeneratePreviewMesh() = 0;

    /**
    * IGladius::GetChannels - Returns an accessor to all channels
    * @return Accessor to the the avilable channels
    */
    virtual IChannelAccessor * GetChannels() = 0;

    /**
    * IGladius::GetDetailedErrorAccessor - Returns an accessor to the detailed error information
    * @return Accessor to the detailed error information
    */
    virtual IDetailedErrorAccessor * GetDetailedErrorAccessor() = 0;

    /**
    * IGladius::ClearDetailedErrors - Clears all detailed errors
    */
    virtual void ClearDetailedErrors() = 0;

    /**
    * IGladius::InjectSmoothingKernel - Injects a smoothing kernel into the model
    * @param[in] sKernel - Code of of the kernel to inject
    */
    virtual void InjectSmoothingKernel(const std::string & sKernel) = 0;

};

typedef IBaseSharedPtr<IGladius> PIGladius;


/*************************************************************************************************************************
 Global functions declarations
**************************************************************************************************************************/
class CWrapper {
public:
    /**
    * Igladius::GetVersion - retrieves the binary version of this library.
    * @param[out] nMajor - returns the major version of this library
    * @param[out] nMinor - returns the minor version of this library
    * @param[out] nMicro - returns the micro version of this library
    */
    static void GetVersion(GladiusLib_uint32 & nMajor, GladiusLib_uint32 & nMinor, GladiusLib_uint32 & nMicro);

    /**
    * Igladius::GetLastError - Returns the last error recorded on this object
    * @param[in] pInstance - Instance Handle
    * @param[out] sErrorMessage - Message of the last error
    * @return Is there a last error to query
    */
    static bool GetLastError(IBase* pInstance, std::string & sErrorMessage);

    /**
    * Igladius::AcquireInstance - Acquire shared ownership of an Instance
    * @param[in] pInstance - Instance Handle
    */
    static void AcquireInstance(IBase* pInstance);

    /**
    * Igladius::ReleaseInstance - Releases shared ownership of an Instance
    * @param[in] pInstance - Instance Handle
    */
    static void ReleaseInstance(IBase* pInstance);

    /**
    * Igladius::CreateGladius - Creates a new Gladius instance
    * @return New Gladius instance
    */
    static IGladius * CreateGladius();

};

} // namespace Impl
} // namespace GladiusLib

#endif // __GLADIUSLIB_CPPINTERFACES
